---
title: "tutorial_advDataViz"
author: "Vivek Jason"
editor: visual
---

### Tutorial 1: Building a contour map in `ggplot()`

Step 1: Load Necessary libraries

Step 2: Convert your Spatial Data to Data Frames. You must convert spatial data ( `mys_health`) to data frames to work with ggplot2. Extra step! Check out `st_coordinates` on how to get this done.

Step 3: Base Map with Administrative Boundaries. Begin by creating a base map using ggplot2 with the administrative boundaries.

Step 4: Add Healthcare Facilities as Points. Next, overlay the healthcare facility points on the base map.

Step 5: Generate a Contour Plot. Finally, add contours to the plot around the healthcare facility points. Adjust the parameters like `size`, `color`, and `alpha` to refine the visual representation as needed.

```{r}

```

### Tutorial 2: Time Series Choropleth in ggplot2

Step 1 Load Necessary Libraries

Step 2: Data Aggregation. Aggregate the number of deaths by state from the dataset c19_df.

Step 3: Merge Data with Spatial Data:. You need to merge the deaths data frame with your spatial data (mys_deaths). This ensures that each spatial unit (state) has its corresponding death count.

Step 4: Base Choropleth. Create a choropleth using ggplot2.

Step 5: Add visual improvements to make the map more informative and appealing. These can include:

-   Legend Adjustments: To make the legend more informative.

-   Theme Adjustments: To clean up axes, grids, and background.

-   Text Annotations: To highlight certain areas or provide additional context.

```{r}

```

### Tutorial 3: Bring epidemiologic curves to life

Step 1: Data Preparation. Load your dataset into R, making sure the `date` column is in the Date format. Group your data by `date` and `state`. For each unique combination of `date` and `state`, calculate the number of cases.

Step 2: Create the Initial Plot with ggplot2. Use the `ggplot()` function from the `ggplot2` package to create a line plot. The x-axis will represent the `date`, the y-axis will represent the `counts`, and the lines will be colored by `state`.

Step 3: Convert to an Interactive Plot. Convert your static `ggplot2` plot into an interactive plot using the `ggplotly()` function from the `plotly` package.

```{r}


```
